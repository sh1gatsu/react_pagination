{"version":3,"sources":["components/Pagination/Pagination.tsx","App.tsx","utils.ts","index.tsx"],"names":["Pagination","total","perPage","currentPage","onPageChange","numberOfPages","Math","ceil","pages","Array","from","length","_","index","isFirstPage","isLastPage","className","classNames","disabled","href","onClick","page","map","active","App","useState","items","setItems","setPerPage","setCurrentPage","useEffect","itemsFromServer","to","numbers","n","push","getNumbers","start","end","visibleItems","massive","slice","slicer","id","value","onChange","event","Number","target","htmlFor","item","ReactDOM","render","document","getElementById"],"mappings":"kNAUaA,EAA8B,SAAC,GAKrC,IAJLC,EAII,EAJJA,MACAC,EAGI,EAHJA,QACAC,EAEI,EAFJA,YACAC,EACI,EADJA,aAEMC,EAAgBC,KAAKC,KAAKN,EAAQC,GAClCM,EAAQC,MAAMC,KAAK,CAAEC,OAAQN,IAAiB,SAACO,EAAGC,GAAJ,OAAcA,EAAQ,KACpEC,EAA8B,IAAhBX,EACdY,EAAaZ,IAAgBE,EAcnC,OACE,qBAAIW,UAAU,aAAd,UACE,oBAAIA,UAAWC,IAAW,YACxB,CAAEC,SAAUJ,IADd,SAGE,mBACE,UAAQ,WACRE,UAAU,YACVG,KAAK,QACL,gBAAeL,EACfM,QAtBgB,WACjBN,GACHV,GAAa,SAAAiB,GAAI,OAAIA,EAAO,MAe1B,oBAWDb,EAAMc,KAAI,SAAAD,GAAI,OACb,oBACEL,UAAWC,IAAW,YACpB,CAAEM,OAAQpB,IAAgBkB,IAF9B,SAKE,mBACE,UAAQ,WACRL,UAAU,YACVG,KAAI,WAAME,GACVD,QAAS,kBAAMhB,EAAaiB,IAJ9B,SAMGA,KAREA,MAaT,oBAAIL,UAAWC,IAAW,YACxB,CAAEC,SAAUH,IADd,SAGE,mBACE,UAAQ,WACRC,UAAU,YACVG,KAAK,QACL,gBAAeJ,EACfK,QA/CgB,WACjBL,GACHX,GAAa,SAAAiB,GAAI,OAAIA,EAAO,MAwC1B,wBChER,IAIaG,EAAgB,WAC3B,MAA0BC,mBAAmB,IAA7C,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA8BF,mBAAS,GAAvC,mBAAOvB,EAAP,KAAgB0B,EAAhB,KACA,EAAsCH,mBAAS,GAA/C,mBAAOtB,EAAP,KAAoB0B,EAApB,KAEAC,qBAAU,WACR,IAAMC,ECfH,SAAoBrB,EAAcsB,GAGvC,IAFA,IAAMC,EAAU,GAEPC,EAAIxB,EAAMwB,GAAKF,EAAIE,GAAK,EAC/BD,EAAQE,KAAKD,GAGf,OAAOD,EDQmBG,CAAW,EAAG,IACnCd,KAAI,SAAAY,GAAC,qBAAYA,MAEpBP,EAASI,KACR,IAEH,IAAMM,GAASlC,EAAc,GAAKD,EAE5BoC,EAAOD,EAAQnC,EAAWwB,EAAMf,OAClCe,EAAMf,OACN0B,EAAQnC,EAERqC,EAAeb,EAInB,OAFAa,EAxBa,SAACF,EAAeC,EAAaE,GAC1C,OAAOA,EAAQC,MAAMJ,EAAOC,GAuBbI,CAAOL,EAAOC,EAAKZ,GAGhC,sBAAKV,UAAU,YAAf,UACE,uDAEA,mBAAGA,UAAU,OAAO,UAAQ,OAA5B,wBACWb,EADX,mBACiCkC,EAAQ,EADzC,cACgDC,EADhD,eAC0DZ,EAAMf,OADhE,OAIA,sBAAKK,UAAU,iBAAf,UACE,qBAAKA,UAAU,0BAAf,SACE,yBACE,UAAQ,kBACR2B,GAAG,kBACH3B,UAAU,eACV4B,MAAO1C,EACP2C,SAAU,SAACC,GACTlB,EAAWmB,OAAOD,EAAME,OAAOJ,QAC/Bf,EAAe,IAPnB,UAUE,wBAAQe,MAAM,IAAd,eACA,wBAAQA,MAAM,IAAd,eACA,wBAAQA,MAAM,KAAd,gBACA,wBAAQA,MAAM,KAAd,qBAIJ,uBAAOK,QAAQ,kBAAkBjC,UAAU,qBAA3C,+BAKF,cAAC,EAAD,CACEf,MAAOyB,EAAMf,OACbT,QAASA,EACTC,YAAaA,EACbC,aAAcyB,IAGhB,6BACGU,EAAajB,KAAI,SAAA4B,GAAI,OACpB,oBAAI,UAAQ,OAAZ,SAA+BA,GAAPA,YErElCC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.f693952d.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport React from 'react';\n\ninterface Props {\n  total: number,\n  perPage: number,\n  currentPage: number,\n  onPageChange: React.Dispatch<React.SetStateAction<number>>,\n}\n\nexport const Pagination: React.FC<Props> = ({\n  total,\n  perPage,\n  currentPage,\n  onPageChange,\n}) => {\n  const numberOfPages = Math.ceil(total / perPage);\n  const pages = Array.from({ length: numberOfPages }, (_, index) => index + 1);\n  const isFirstPage = currentPage === 1;\n  const isLastPage = currentPage === numberOfPages;\n\n  const prevLinkHandler = () => {\n    if (!isFirstPage) {\n      onPageChange(page => page - 1);\n    }\n  };\n\n  const nextLinkHandler = () => {\n    if (!isLastPage) {\n      onPageChange(page => page + 1);\n    }\n  };\n\n  return (\n    <ul className=\"pagination\">\n      <li className={classNames('page-item',\n        { disabled: isFirstPage })}\n      >\n        <a\n          data-cy=\"prevLink\"\n          className=\"page-link\"\n          href=\"#prev\"\n          aria-disabled={isFirstPage}\n          onClick={prevLinkHandler}\n        >\n          «\n        </a>\n      </li>\n\n      {pages.map(page => (\n        <li\n          className={classNames('page-item',\n            { active: currentPage === page })}\n          key={page}\n        >\n          <a\n            data-cy=\"pageLink\"\n            className=\"page-link\"\n            href={`#${page}`}\n            onClick={() => onPageChange(page)}\n          >\n            {page}\n          </a>\n        </li>\n      ))}\n\n      <li className={classNames('page-item',\n        { disabled: isLastPage })}\n      >\n        <a\n          data-cy=\"nextLink\"\n          className=\"page-link\"\n          href=\"#next\"\n          aria-disabled={isLastPage}\n          onClick={nextLinkHandler}\n        >\n          »\n        </a>\n      </li>\n    </ul>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport { Pagination } from './components/Pagination';\nimport { getNumbers } from './utils';\n\nconst slicer = (start: number, end: number, massive: string[]) => {\n  return massive.slice(start, end);\n};\n\nexport const App: React.FC = () => {\n  const [items, setItems] = useState<string[]>([]);\n  const [perPage, setPerPage] = useState(5);\n  const [currentPage, setCurrentPage] = useState(1);\n\n  useEffect(() => {\n    const itemsFromServer = getNumbers(1, 42)\n      .map(n => `Item ${n}`);\n\n    setItems(itemsFromServer);\n  }, []);\n\n  const start = (currentPage - 1) * perPage;\n\n  const end = (start + perPage) > items.length\n    ? items.length\n    : start + perPage;\n\n  let visibleItems = items;\n\n  visibleItems = slicer(start, end, items);\n\n  return (\n    <div className=\"container\">\n      <h1>Items with Pagination</h1>\n\n      <p className=\"lead\" data-cy=\"info\">\n        {`Page ${currentPage} (items ${start + 1} - ${end} of ${items.length})`}\n      </p>\n\n      <div className=\"form-group row\">\n        <div className=\"col-3 col-sm-2 col-xl-1\">\n          <select\n            data-cy=\"perPageSelector\"\n            id=\"perPageSelector\"\n            className=\"form-control\"\n            value={perPage}\n            onChange={(event) => {\n              setPerPage(Number(event.target.value));\n              setCurrentPage(1);\n            }}\n          >\n            <option value=\"3\">3</option>\n            <option value=\"5\">5</option>\n            <option value=\"10\">10</option>\n            <option value=\"20\">20</option>\n          </select>\n        </div>\n\n        <label htmlFor=\"perPageSelector\" className=\"col-form-label col\">\n          items per page\n        </label>\n      </div>\n\n      <Pagination\n        total={items.length}\n        perPage={perPage}\n        currentPage={currentPage}\n        onPageChange={setCurrentPage}\n      />\n\n      <ul>\n        {visibleItems.map(item => (\n          <li data-cy=\"item\" key={item}>{item}</li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default App;\n","export function getNumbers(from: number, to: number): number[] {\n  const numbers = [];\n\n  for (let n = from; n <= to; n += 1) {\n    numbers.push(n);\n  }\n\n  return numbers;\n}\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}